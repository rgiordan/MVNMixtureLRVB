// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;
using Eigen::Map; 
using Eigen::MatrixXd;
using Eigen::VectorXd;
using Eigen::SparseMatrix;
using Eigen::SparseLU;
using Eigen::HouseholderQR;
typedef Eigen::MappedSparseMatrix<double> MappedSpMat;
typedef Eigen::Map<MatrixXd> MappedMat;
typedef Eigen::Map<VectorXd> MappedVec;
using Eigen::HouseholderQR;
typedef Eigen::Triplet<double> Triplet; // For populating sparse matrices

// GetMatrixSizeFromUTSize
int GetMatrixSizeFromUTSize(int ut_size);
RcppExport SEXP MVNMixtureLRVB_GetMatrixSizeFromUTSize(SEXP ut_sizeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type ut_size(ut_sizeSEXP );
        int __result = GetMatrixSizeFromUTSize(ut_size);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetUpperTriangularIndex
int GetUpperTriangularIndex(int p1, int p2);
RcppExport SEXP MVNMixtureLRVB_GetUpperTriangularIndex(SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type p1(p1SEXP );
        Rcpp::traits::input_parameter< int >::type p2(p2SEXP );
        int __result = GetUpperTriangularIndex(p1, p2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ConvertSymmetricMatrixToVector
VectorXd ConvertSymmetricMatrixToVector(const MatrixXd x);
RcppExport SEXP MVNMixtureLRVB_ConvertSymmetricMatrixToVector(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        VectorXd __result = ConvertSymmetricMatrixToVector(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ConvertVectorToSymmetricMatrix
MatrixXd ConvertVectorToSymmetricMatrix(const VectorXd x_vec);
RcppExport SEXP MVNMixtureLRVB_ConvertVectorToSymmetricMatrix(SEXP x_vecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type x_vec(x_vecSEXP );
        MatrixXd __result = ConvertVectorToSymmetricMatrix(x_vec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetXCoordinate
int GetXCoordinate(int n, int p, int n_tot, int p_tot);
RcppExport SEXP MVNMixtureLRVB_GetXCoordinate(SEXP nSEXP, SEXP pSEXP, SEXP n_totSEXP, SEXP p_totSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        Rcpp::traits::input_parameter< int >::type n_tot(n_totSEXP );
        Rcpp::traits::input_parameter< int >::type p_tot(p_totSEXP );
        int __result = GetXCoordinate(n, p, n_tot, p_tot);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// LinearlyPackParameters
VectorXd LinearlyPackParameters(const MatrixXd mu, const MatrixXd lambda, const VectorXd pi);
RcppExport SEXP MVNMixtureLRVB_LinearlyPackParameters(SEXP muSEXP, SEXP lambdaSEXP, SEXP piSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type pi(piSEXP );
        VectorXd __result = LinearlyPackParameters(mu, lambda, pi);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// LinearlyUnpackParameters
Rcpp::List LinearlyUnpackParameters(const VectorXd par, int k_tot, int p_tot);
RcppExport SEXP MVNMixtureLRVB_LinearlyUnpackParameters(SEXP parSEXP, SEXP k_totSEXP, SEXP p_totSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type par(parSEXP );
        Rcpp::traits::input_parameter< int >::type k_tot(k_totSEXP );
        Rcpp::traits::input_parameter< int >::type p_tot(p_totSEXP );
        Rcpp::List __result = LinearlyUnpackParameters(par, k_tot, p_tot);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// PackVBParameters
VectorXd PackVBParameters(const MatrixXd e_z, const MatrixXd e_mu, const MatrixXd e_mu2, const MatrixXd e_lambda, const VectorXd e_log_det_lambda, const VectorXd e_log_pi);
RcppExport SEXP MVNMixtureLRVB_PackVBParameters(SEXP e_zSEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_lambdaSEXP, SEXP e_log_det_lambdaSEXP, SEXP e_log_piSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type e_z(e_zSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_log_det_lambda(e_log_det_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_log_pi(e_log_piSEXP );
        VectorXd __result = PackVBParameters(e_z, e_mu, e_mu2, e_lambda, e_log_det_lambda, e_log_pi);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// UnpackVBParameters
Rcpp::List UnpackVBParameters(const VectorXd par, const int n_tot, const int p_tot, const int k_tot);
RcppExport SEXP MVNMixtureLRVB_UnpackVBParameters(SEXP parSEXP, SEXP n_totSEXP, SEXP p_totSEXP, SEXP k_totSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type par(parSEXP );
        Rcpp::traits::input_parameter< const int >::type n_tot(n_totSEXP );
        Rcpp::traits::input_parameter< const int >::type p_tot(p_totSEXP );
        Rcpp::traits::input_parameter< const int >::type k_tot(k_totSEXP );
        Rcpp::List __result = UnpackVBParameters(par, n_tot, p_tot, k_tot);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// UnpackVBThetaParameters
Rcpp::List UnpackVBThetaParameters(const VectorXd par, const int n_tot, const int p_tot, const int k_tot);
RcppExport SEXP MVNMixtureLRVB_UnpackVBThetaParameters(SEXP parSEXP, SEXP n_totSEXP, SEXP p_totSEXP, SEXP k_totSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type par(parSEXP );
        Rcpp::traits::input_parameter< const int >::type n_tot(n_totSEXP );
        Rcpp::traits::input_parameter< const int >::type p_tot(p_totSEXP );
        Rcpp::traits::input_parameter< const int >::type k_tot(k_totSEXP );
        Rcpp::List __result = UnpackVBThetaParameters(par, n_tot, p_tot, k_tot);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetCoreVBThetaIndices
Rcpp::List GetCoreVBThetaIndices(const int n_tot, const int p_tot, const int k_tot);
RcppExport SEXP MVNMixtureLRVB_GetCoreVBThetaIndices(SEXP n_totSEXP, SEXP p_totSEXP, SEXP k_totSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type n_tot(n_totSEXP );
        Rcpp::traits::input_parameter< const int >::type p_tot(p_totSEXP );
        Rcpp::traits::input_parameter< const int >::type k_tot(k_totSEXP );
        Rcpp::List __result = GetCoreVBThetaIndices(n_tot, p_tot, k_tot);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// PackXParameters
VectorXd PackXParameters(const MatrixXd x);
RcppExport SEXP MVNMixtureLRVB_PackXParameters(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        VectorXd __result = PackXParameters(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// UnpackXParameters
Rcpp::List UnpackXParameters(const VectorXd par, const int n_tot, const int p_tot);
RcppExport SEXP MVNMixtureLRVB_UnpackXParameters(SEXP parSEXP, SEXP n_totSEXP, SEXP p_totSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type par(parSEXP );
        Rcpp::traits::input_parameter< const int >::type n_tot(n_totSEXP );
        Rcpp::traits::input_parameter< const int >::type p_tot(p_totSEXP );
        Rcpp::List __result = UnpackXParameters(par, n_tot, p_tot);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// InvertLinearizedMatrices
MatrixXd InvertLinearizedMatrices(const MatrixXd par_mat);
RcppExport SEXP MVNMixtureLRVB_InvertLinearizedMatrices(SEXP par_matSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type par_mat(par_matSEXP );
        MatrixXd __result = InvertLinearizedMatrices(par_mat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// LogDeterminantOfLinearizedMatrices
VectorXd LogDeterminantOfLinearizedMatrices(const MatrixXd par_mat);
RcppExport SEXP MVNMixtureLRVB_LogDeterminantOfLinearizedMatrices(SEXP par_matSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type par_mat(par_matSEXP );
        VectorXd __result = LogDeterminantOfLinearizedMatrices(par_mat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetVectorizedOuterProductMatrix
MatrixXd GetVectorizedOuterProductMatrix(const MatrixXd mat);
RcppExport SEXP MVNMixtureLRVB_GetVectorizedOuterProductMatrix(SEXP matSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type mat(matSEXP );
        MatrixXd __result = GetVectorizedOuterProductMatrix(mat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CppLgamma
double CppLgamma(double x);
RcppExport SEXP MVNMixtureLRVB_CppLgamma(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        double __result = CppLgamma(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CppDigamma
double CppDigamma(double x);
RcppExport SEXP MVNMixtureLRVB_CppDigamma(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        double __result = CppDigamma(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CppTrigamma
double CppTrigamma(double x);
RcppExport SEXP MVNMixtureLRVB_CppTrigamma(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        double __result = CppTrigamma(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CppMultivariateLgamma
double CppMultivariateLgamma(double x, int p);
RcppExport SEXP MVNMixtureLRVB_CppMultivariateLgamma(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        double __result = CppMultivariateLgamma(x, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CppMultivariateDigamma
double CppMultivariateDigamma(double x, int p);
RcppExport SEXP MVNMixtureLRVB_CppMultivariateDigamma(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        double __result = CppMultivariateDigamma(x, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CppMultivariateTrigamma
double CppMultivariateTrigamma(double x, int p);
RcppExport SEXP MVNMixtureLRVB_CppMultivariateTrigamma(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        double __result = CppMultivariateTrigamma(x, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// MVNLogLikelihoodPoint
double MVNLogLikelihoodPoint(const VectorXd x, const VectorXd e_mu, const VectorXd e_mu2, const VectorXd e_lambda, const double e_log_det_lambda, const double e_log_pi);
RcppExport SEXP MVNMixtureLRVB_MVNLogLikelihoodPoint(SEXP xSEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_lambdaSEXP, SEXP e_log_det_lambdaSEXP, SEXP e_log_piSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< const double >::type e_log_det_lambda(e_log_det_lambdaSEXP );
        Rcpp::traits::input_parameter< const double >::type e_log_pi(e_log_piSEXP );
        double __result = MVNLogLikelihoodPoint(x, e_mu, e_mu2, e_lambda, e_log_det_lambda, e_log_pi);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// MVNLogLikelihoodPointWithX2
double MVNLogLikelihoodPointWithX2(const VectorXd x, const VectorXd x2, const VectorXd e_mu, const VectorXd e_mu2, const VectorXd e_lambda, const double e_log_det_lambda, const double e_log_pi);
RcppExport SEXP MVNMixtureLRVB_MVNLogLikelihoodPointWithX2(SEXP xSEXP, SEXP x2SEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_lambdaSEXP, SEXP e_log_det_lambdaSEXP, SEXP e_log_piSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type x2(x2SEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< const double >::type e_log_det_lambda(e_log_det_lambdaSEXP );
        Rcpp::traits::input_parameter< const double >::type e_log_pi(e_log_piSEXP );
        double __result = MVNLogLikelihoodPointWithX2(x, x2, e_mu, e_mu2, e_lambda, e_log_det_lambda, e_log_pi);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// LogPriorMu
VectorXd LogPriorMu(const MatrixXd e_mu, const MatrixXd e_mu2, const MatrixXd mu_prior_mean, const MatrixXd mu_prior_info);
RcppExport SEXP MVNMixtureLRVB_LogPriorMu(SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP mu_prior_meanSEXP, SEXP mu_prior_infoSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu_prior_mean(mu_prior_meanSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu_prior_info(mu_prior_infoSEXP );
        VectorXd __result = LogPriorMu(e_mu, e_mu2, mu_prior_mean, mu_prior_info);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// LogPriorLambda
VectorXd LogPriorLambda(const MatrixXd e_lambda, const VectorXd e_log_det_lambda, const MatrixXd lambda_prior_v_inv, const VectorXd lambda_prior_n);
RcppExport SEXP MVNMixtureLRVB_LogPriorLambda(SEXP e_lambdaSEXP, SEXP e_log_det_lambdaSEXP, SEXP lambda_prior_v_invSEXP, SEXP lambda_prior_nSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_log_det_lambda(e_log_det_lambdaSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda_prior_v_inv(lambda_prior_v_invSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type lambda_prior_n(lambda_prior_nSEXP );
        VectorXd __result = LogPriorLambda(e_lambda, e_log_det_lambda, lambda_prior_v_inv, lambda_prior_n);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// LogPriorPi
VectorXd LogPriorPi(const VectorXd e_log_pi, const VectorXd pi_prior_alpha);
RcppExport SEXP MVNMixtureLRVB_LogPriorPi(SEXP e_log_piSEXP, SEXP pi_prior_alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type e_log_pi(e_log_piSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type pi_prior_alpha(pi_prior_alphaSEXP );
        VectorXd __result = LogPriorPi(e_log_pi, pi_prior_alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// MarginalLogLikelihoodWithPriors
double MarginalLogLikelihoodWithPriors(const MatrixXd x, const MatrixXd mu, const MatrixXd lambda, const VectorXd pi, const bool use_mu_prior, const bool use_lambda_prior, const bool use_pi_prior, const MatrixXd mu_prior_mean, const MatrixXd mu_prior_info, const MatrixXd lambda_prior_v_inv, const VectorXd lambda_prior_n, const VectorXd pi_prior_alpha, const bool debug = false);
RcppExport SEXP MVNMixtureLRVB_MarginalLogLikelihoodWithPriors(SEXP xSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP piSEXP, SEXP use_mu_priorSEXP, SEXP use_lambda_priorSEXP, SEXP use_pi_priorSEXP, SEXP mu_prior_meanSEXP, SEXP mu_prior_infoSEXP, SEXP lambda_prior_v_invSEXP, SEXP lambda_prior_nSEXP, SEXP pi_prior_alphaSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type pi(piSEXP );
        Rcpp::traits::input_parameter< const bool >::type use_mu_prior(use_mu_priorSEXP );
        Rcpp::traits::input_parameter< const bool >::type use_lambda_prior(use_lambda_priorSEXP );
        Rcpp::traits::input_parameter< const bool >::type use_pi_prior(use_pi_priorSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu_prior_mean(mu_prior_meanSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu_prior_info(mu_prior_infoSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda_prior_v_inv(lambda_prior_v_invSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type lambda_prior_n(lambda_prior_nSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type pi_prior_alpha(pi_prior_alphaSEXP );
        Rcpp::traits::input_parameter< const bool >::type debug(debugSEXP );
        double __result = MarginalLogLikelihoodWithPriors(x, mu, lambda, pi, use_mu_prior, use_lambda_prior, use_pi_prior, mu_prior_mean, mu_prior_info, lambda_prior_v_inv, lambda_prior_n, pi_prior_alpha, debug);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// MarginalLogLikelihood
double MarginalLogLikelihood(const MatrixXd x, const MatrixXd mu, const MatrixXd lambda, const VectorXd pi);
RcppExport SEXP MVNMixtureLRVB_MarginalLogLikelihood(SEXP xSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP piSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type pi(piSEXP );
        double __result = MarginalLogLikelihood(x, mu, lambda, pi);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CompleteLogLikelihoodWithPriors
double CompleteLogLikelihoodWithPriors(const MatrixXd x, const MatrixXd z, const MatrixXd mu, const MatrixXd mu2, const MatrixXd lambda, const VectorXd log_det_lambda, const VectorXd log_pi, const bool use_mu_prior, const bool use_lambda_prior, const bool use_pi_prior, const MatrixXd mu_prior_mean, const MatrixXd mu_prior_info, const MatrixXd lambda_prior_v_inv, const VectorXd lambda_prior_n, const VectorXd pi_prior_alpha, const bool debug = false);
RcppExport SEXP MVNMixtureLRVB_CompleteLogLikelihoodWithPriors(SEXP xSEXP, SEXP zSEXP, SEXP muSEXP, SEXP mu2SEXP, SEXP lambdaSEXP, SEXP log_det_lambdaSEXP, SEXP log_piSEXP, SEXP use_mu_priorSEXP, SEXP use_lambda_priorSEXP, SEXP use_pi_priorSEXP, SEXP mu_prior_meanSEXP, SEXP mu_prior_infoSEXP, SEXP lambda_prior_v_invSEXP, SEXP lambda_prior_nSEXP, SEXP pi_prior_alphaSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type z(zSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu2(mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type log_det_lambda(log_det_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type log_pi(log_piSEXP );
        Rcpp::traits::input_parameter< const bool >::type use_mu_prior(use_mu_priorSEXP );
        Rcpp::traits::input_parameter< const bool >::type use_lambda_prior(use_lambda_priorSEXP );
        Rcpp::traits::input_parameter< const bool >::type use_pi_prior(use_pi_priorSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu_prior_mean(mu_prior_meanSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu_prior_info(mu_prior_infoSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda_prior_v_inv(lambda_prior_v_invSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type lambda_prior_n(lambda_prior_nSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type pi_prior_alpha(pi_prior_alphaSEXP );
        Rcpp::traits::input_parameter< const bool >::type debug(debugSEXP );
        double __result = CompleteLogLikelihoodWithPriors(x, z, mu, mu2, lambda, log_det_lambda, log_pi, use_mu_prior, use_lambda_prior, use_pi_prior, mu_prior_mean, mu_prior_info, lambda_prior_v_inv, lambda_prior_n, pi_prior_alpha, debug);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CompleteLogLikelihoodWithX2
double CompleteLogLikelihoodWithX2(const MatrixXd x, const MatrixXd x2, const MatrixXd z, const MatrixXd mu, const MatrixXd mu2, const MatrixXd lambda, const VectorXd log_det_lambda, const VectorXd log_pi, const bool debug = false);
RcppExport SEXP MVNMixtureLRVB_CompleteLogLikelihoodWithX2(SEXP xSEXP, SEXP x2SEXP, SEXP zSEXP, SEXP muSEXP, SEXP mu2SEXP, SEXP lambdaSEXP, SEXP log_det_lambdaSEXP, SEXP log_piSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type x2(x2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type z(zSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu2(mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type log_det_lambda(log_det_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type log_pi(log_piSEXP );
        Rcpp::traits::input_parameter< const bool >::type debug(debugSEXP );
        double __result = CompleteLogLikelihoodWithX2(x, x2, z, mu, mu2, lambda, log_det_lambda, log_pi, debug);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// WishartEntropy
double WishartEntropy(const double log_det_v, const double n_par, const int p_tot);
RcppExport SEXP MVNMixtureLRVB_WishartEntropy(SEXP log_det_vSEXP, SEXP n_parSEXP, SEXP p_totSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type log_det_v(log_det_vSEXP );
        Rcpp::traits::input_parameter< const double >::type n_par(n_parSEXP );
        Rcpp::traits::input_parameter< const int >::type p_tot(p_totSEXP );
        double __result = WishartEntropy(log_det_v, n_par, p_tot);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// DirichletEntropy
double DirichletEntropy(const VectorXd alpha);
RcppExport SEXP MVNMixtureLRVB_DirichletEntropy(SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type alpha(alphaSEXP );
        double __result = DirichletEntropy(alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// MultinouliiEntropy
double MultinouliiEntropy(const MatrixXd p_mat);
RcppExport SEXP MVNMixtureLRVB_MultinouliiEntropy(SEXP p_matSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type p_mat(p_matSEXP );
        double __result = MultinouliiEntropy(p_mat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetVariationalEntropy
double GetVariationalEntropy(const MatrixXd z, const MatrixXd mu, const MatrixXd mu2, const MatrixXd lambda_par, const VectorXd n_par, const VectorXd pi_par);
RcppExport SEXP MVNMixtureLRVB_GetVariationalEntropy(SEXP zSEXP, SEXP muSEXP, SEXP mu2SEXP, SEXP lambda_parSEXP, SEXP n_parSEXP, SEXP pi_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type z(zSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu2(mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda_par(lambda_parSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type n_par(n_parSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type pi_par(pi_parSEXP );
        double __result = GetVariationalEntropy(z, mu, mu2, lambda_par, n_par, pi_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// UpdateMuPosterior
Rcpp::List UpdateMuPosterior(const MatrixXd x, const MatrixXd e_lambda_inv_mat, const MatrixXd e_z);
RcppExport SEXP MVNMixtureLRVB_UpdateMuPosterior(SEXP xSEXP, SEXP e_lambda_inv_matSEXP, SEXP e_zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda_inv_mat(e_lambda_inv_matSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_z(e_zSEXP );
        Rcpp::List __result = UpdateMuPosterior(x, e_lambda_inv_mat, e_z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// UpdateLambdaPosterior
Rcpp::List UpdateLambdaPosterior(const MatrixXd x, const MatrixXd e_mu, const MatrixXd e_mu2, const MatrixXd e_z, const bool use_prior, const MatrixXd lambda_prior_v_inv, const VectorXd lambda_prior_n);
RcppExport SEXP MVNMixtureLRVB_UpdateLambdaPosterior(SEXP xSEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_zSEXP, SEXP use_priorSEXP, SEXP lambda_prior_v_invSEXP, SEXP lambda_prior_nSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_z(e_zSEXP );
        Rcpp::traits::input_parameter< const bool >::type use_prior(use_priorSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda_prior_v_inv(lambda_prior_v_invSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type lambda_prior_n(lambda_prior_nSEXP );
        Rcpp::List __result = UpdateLambdaPosterior(x, e_mu, e_mu2, e_z, use_prior, lambda_prior_v_inv, lambda_prior_n);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// WishartELogDet
VectorXd WishartELogDet(const MatrixXd lambda_par, const VectorXd n_par);
RcppExport SEXP MVNMixtureLRVB_WishartELogDet(SEXP lambda_parSEXP, SEXP n_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda_par(lambda_parSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type n_par(n_parSEXP );
        VectorXd __result = WishartELogDet(lambda_par, n_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetELogDirichlet
VectorXd GetELogDirichlet(const VectorXd alpha);
RcppExport SEXP MVNMixtureLRVB_GetELogDirichlet(SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type alpha(alphaSEXP );
        VectorXd __result = GetELogDirichlet(alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetLogDirichletCovariance
MatrixXd GetLogDirichletCovariance(const VectorXd alpha);
RcppExport SEXP MVNMixtureLRVB_GetLogDirichletCovariance(SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type alpha(alphaSEXP );
        MatrixXd __result = GetLogDirichletCovariance(alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetLogPiVariance
SparseMatrix<double> GetLogPiVariance(const VectorXd pi_par);
RcppExport SEXP MVNMixtureLRVB_GetLogPiVariance(SEXP pi_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type pi_par(pi_parSEXP );
        SparseMatrix<double> __result = GetLogPiVariance(pi_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetMuVariance
SparseMatrix<double> GetMuVariance(const MatrixXd mu_par, const MatrixXd mu2_par);
RcppExport SEXP MVNMixtureLRVB_GetMuVariance(SEXP mu_parSEXP, SEXP mu2_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type mu_par(mu_parSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type mu2_par(mu2_parSEXP );
        SparseMatrix<double> __result = GetMuVariance(mu_par, mu2_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetWishartLinearCovariance
MatrixXd GetWishartLinearCovariance(const VectorXd w_par, double n_par);
RcppExport SEXP MVNMixtureLRVB_GetWishartLinearCovariance(SEXP w_parSEXP, SEXP n_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type w_par(w_parSEXP );
        Rcpp::traits::input_parameter< double >::type n_par(n_parSEXP );
        MatrixXd __result = GetWishartLinearCovariance(w_par, n_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetWishartLinearLogDetCovariance
VectorXd GetWishartLinearLogDetCovariance(const VectorXd w_par);
RcppExport SEXP MVNMixtureLRVB_GetWishartLinearLogDetCovariance(SEXP w_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const VectorXd >::type w_par(w_parSEXP );
        VectorXd __result = GetWishartLinearLogDetCovariance(w_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetWishartLogDetVariance
double GetWishartLogDetVariance(double n_par, int p);
RcppExport SEXP MVNMixtureLRVB_GetWishartLogDetVariance(SEXP n_parSEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type n_par(n_parSEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        double __result = GetWishartLogDetVariance(n_par, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetLambdaVariance
SparseMatrix<double> GetLambdaVariance(const MatrixXd lambda_par, const VectorXd n_par);
RcppExport SEXP MVNMixtureLRVB_GetLambdaVariance(SEXP lambda_parSEXP, SEXP n_parSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type lambda_par(lambda_parSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type n_par(n_parSEXP );
        SparseMatrix<double> __result = GetLambdaVariance(lambda_par, n_par);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetXVariance
SparseMatrix<double> GetXVariance(const MatrixXd x);
RcppExport SEXP MVNMixtureLRVB_GetXVariance(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        SparseMatrix<double> __result = GetXVariance(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetXVarianceSubset
SparseMatrix<double> GetXVarianceSubset(const MatrixXd x, const VectorXd x_indices);
RcppExport SEXP MVNMixtureLRVB_GetXVarianceSubset(SEXP xSEXP, SEXP x_indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type x_indices(x_indicesSEXP );
        SparseMatrix<double> __result = GetXVarianceSubset(x, x_indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetZMatrixInPlace
int GetZMatrixInPlace(Rcpp::NumericMatrix z, const MatrixXd x, const MatrixXd e_mu, const MatrixXd e_mu2, const MatrixXd e_lambda, const VectorXd e_log_det_lambda, const VectorXd e_log_pi);
RcppExport SEXP MVNMixtureLRVB_GetZMatrixInPlace(SEXP zSEXP, SEXP xSEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_lambdaSEXP, SEXP e_log_det_lambdaSEXP, SEXP e_log_piSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type z(zSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_log_det_lambda(e_log_det_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_log_pi(e_log_piSEXP );
        int __result = GetZMatrixInPlace(z, x, e_mu, e_mu2, e_lambda, e_log_det_lambda, e_log_pi);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetZMatrix
Rcpp::NumericMatrix GetZMatrix(const MatrixXd x, const MatrixXd e_mu, const MatrixXd e_mu2, const MatrixXd e_lambda, const VectorXd e_log_det_lambda, const VectorXd e_log_pi);
RcppExport SEXP MVNMixtureLRVB_GetZMatrix(SEXP xSEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_lambdaSEXP, SEXP e_log_det_lambdaSEXP, SEXP e_log_piSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_log_det_lambda(e_log_det_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type e_log_pi(e_log_piSEXP );
        Rcpp::NumericMatrix __result = GetZMatrix(x, e_mu, e_mu2, e_lambda, e_log_det_lambda, e_log_pi);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetSingleZCovariance
MatrixXd GetSingleZCovariance(VectorXd z);
RcppExport SEXP MVNMixtureLRVB_GetSingleZCovariance(SEXP zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< VectorXd >::type z(zSEXP );
        MatrixXd __result = GetSingleZCovariance(z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetZCovariance
SparseMatrix<double> GetZCovariance(MatrixXd z_mat);
RcppExport SEXP MVNMixtureLRVB_GetZCovariance(SEXP z_matSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< MatrixXd >::type z_mat(z_matSEXP );
        SparseMatrix<double> __result = GetZCovariance(z_mat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetHThetaZ
SparseMatrix<double> GetHThetaZ(const MatrixXd x, const MatrixXd e_mu, const MatrixXd e_mu2, const MatrixXd e_lambda);
RcppExport SEXP MVNMixtureLRVB_GetHThetaZ(SEXP xSEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_lambdaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        SparseMatrix<double> __result = GetHThetaZ(x, e_mu, e_mu2, e_lambda);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetHThetaTheta
SparseMatrix<double> GetHThetaTheta(const MatrixXd x, const MatrixXd e_z);
RcppExport SEXP MVNMixtureLRVB_GetHThetaTheta(SEXP xSEXP, SEXP e_zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_z(e_zSEXP );
        SparseMatrix<double> __result = GetHThetaTheta(x, e_z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetHThetaX
SparseMatrix<double> GetHThetaX(const MatrixXd e_z, const MatrixXd e_mu, const MatrixXd e_lambda);
RcppExport SEXP MVNMixtureLRVB_GetHThetaX(SEXP e_zSEXP, SEXP e_muSEXP, SEXP e_lambdaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type e_z(e_zSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        SparseMatrix<double> __result = GetHThetaX(e_z, e_mu, e_lambda);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetHThetaXSubset
SparseMatrix<double> GetHThetaXSubset(const MatrixXd e_z, const MatrixXd e_mu, const MatrixXd e_lambda, const VectorXd x_indices);
RcppExport SEXP MVNMixtureLRVB_GetHThetaXSubset(SEXP e_zSEXP, SEXP e_muSEXP, SEXP e_lambdaSEXP, SEXP x_indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const MatrixXd >::type e_z(e_zSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type x_indices(x_indicesSEXP );
        SparseMatrix<double> __result = GetHThetaXSubset(e_z, e_mu, e_lambda, x_indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetHZX
SparseMatrix<double> GetHZX(const int n_tot, const MatrixXd e_mu, const MatrixXd e_lambda);
RcppExport SEXP MVNMixtureLRVB_GetHZX(SEXP n_totSEXP, SEXP e_muSEXP, SEXP e_lambdaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type n_tot(n_totSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        SparseMatrix<double> __result = GetHZX(n_tot, e_mu, e_lambda);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetHZXSubset
SparseMatrix<double> GetHZXSubset(const int n_tot, const MatrixXd e_mu, const MatrixXd e_lambda, const VectorXd x_indices);
RcppExport SEXP MVNMixtureLRVB_GetHZXSubset(SEXP n_totSEXP, SEXP e_muSEXP, SEXP e_lambdaSEXP, SEXP x_indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type n_tot(n_totSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< const MatrixXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< const VectorXd >::type x_indices(x_indicesSEXP );
        SparseMatrix<double> __result = GetHZXSubset(n_tot, e_mu, e_lambda, x_indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// PredictPerturbationEffect
VectorXd PredictPerturbationEffect(MatrixXd x, MatrixXd tx_cov, int x_n, int x_p, double delta);
RcppExport SEXP MVNMixtureLRVB_PredictPerturbationEffect(SEXP xSEXP, SEXP tx_covSEXP, SEXP x_nSEXP, SEXP x_pSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type tx_cov(tx_covSEXP );
        Rcpp::traits::input_parameter< int >::type x_n(x_nSEXP );
        Rcpp::traits::input_parameter< int >::type x_p(x_pSEXP );
        Rcpp::traits::input_parameter< double >::type delta(deltaSEXP );
        VectorXd __result = PredictPerturbationEffect(x, tx_cov, x_n, x_p, delta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GetLRVBCorrectionTerm
MatrixXd GetLRVBCorrectionTerm(MatrixXd x, MatrixXd e_mu, MatrixXd e_mu2, MatrixXd e_lambda, MatrixXd e_z, SparseMatrix<double> theta_cov, bool verbose = false);
RcppExport SEXP MVNMixtureLRVB_GetLRVBCorrectionTerm(SEXP xSEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_lambdaSEXP, SEXP e_zSEXP, SEXP theta_covSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type e_z(e_zSEXP );
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type theta_cov(theta_covSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        MatrixXd __result = GetLRVBCorrectionTerm(x, e_mu, e_mu2, e_lambda, e_z, theta_cov, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CPPGetLRVBCovariance
MatrixXd CPPGetLRVBCovariance(MatrixXd x, MatrixXd e_mu, MatrixXd e_mu2, MatrixXd e_lambda, MatrixXd e_z, SparseMatrix<double> theta_cov, bool verbose = false);
RcppExport SEXP MVNMixtureLRVB_CPPGetLRVBCovariance(SEXP xSEXP, SEXP e_muSEXP, SEXP e_mu2SEXP, SEXP e_lambdaSEXP, SEXP e_zSEXP, SEXP theta_covSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< MatrixXd >::type x(xSEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type e_mu(e_muSEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type e_mu2(e_mu2SEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type e_lambda(e_lambdaSEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type e_z(e_zSEXP );
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type theta_cov(theta_covSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        MatrixXd __result = CPPGetLRVBCovariance(x, e_mu, e_mu2, e_lambda, e_z, theta_cov, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CPPGetLRVBCovarianceFromCorrection
MatrixXd CPPGetLRVBCovarianceFromCorrection(MatrixXd lrvb_correction, SparseMatrix<double> theta_cov, bool verbose = false);
RcppExport SEXP MVNMixtureLRVB_CPPGetLRVBCovarianceFromCorrection(SEXP lrvb_correctionSEXP, SEXP theta_covSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< MatrixXd >::type lrvb_correction(lrvb_correctionSEXP );
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type theta_cov(theta_covSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        MatrixXd __result = CPPGetLRVBCovarianceFromCorrection(lrvb_correction, theta_cov, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CPPGetLeverageScores
MatrixXd CPPGetLeverageScores(SparseMatrix<double> z_cov, SparseMatrix<double> x_cov, SparseMatrix<double> htx, SparseMatrix<double> htz, SparseMatrix<double> hzx, MatrixXd lrvb_correction, SparseMatrix<double> theta_cov, bool verbose = false);
RcppExport SEXP MVNMixtureLRVB_CPPGetLeverageScores(SEXP z_covSEXP, SEXP x_covSEXP, SEXP htxSEXP, SEXP htzSEXP, SEXP hzxSEXP, SEXP lrvb_correctionSEXP, SEXP theta_covSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type z_cov(z_covSEXP );
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type x_cov(x_covSEXP );
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type htx(htxSEXP );
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type htz(htzSEXP );
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type hzx(hzxSEXP );
        Rcpp::traits::input_parameter< MatrixXd >::type lrvb_correction(lrvb_correctionSEXP );
        Rcpp::traits::input_parameter< SparseMatrix<double> >::type theta_cov(theta_covSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        MatrixXd __result = CPPGetLeverageScores(z_cov, x_cov, htx, htz, hzx, lrvb_correction, theta_cov, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
